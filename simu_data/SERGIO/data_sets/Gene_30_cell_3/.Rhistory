map_dt <- bitr(dt$geneid, fromType = "ENTREZID",toType = c( "SYMBOL"),OrgDb = org.Hs.eg.db)
dt_merge <- merge(map_dt,dt, by.y = "geneid", by.x = "ENTREZID")
rownames(dt_merge) <- dt_merge$SYMBOL
dt_merge$SYMBOL <- NULL
dt_merge$ENTREZID <- NULL
View(dt_merge)
map_dt <- bitr(dt$geneid, fromType = "ENTREZID",toType = c( "SYMBOL"),OrgDb = org.Hs.eg.db)
dt_merge <- merge(map_dt,dt, by.y = "geneid", by.x = "ENTREZID")
rownames(dt_merge) <- dt_merge$SYMBOL
View(dt_merge)
View(map_dt)
View(map_dt)
View(dt)
dt$geneid <- as.numeric(dt$geneid)
View(dt)
A<-t(dt$geneid)
View(A)
A<-(dt$geneid)
View(dt)
A <- unique(A)
View(map_dt)
library(dplyr)
wiki_pathway2 <- as.data.frame(wiki_pathway1)
View(wiki_pathway2)
colnames(map_dt) = c("probe_id" ,"symbol")
View(map_dt)
wiki_pathway2$probe_id <- rownames(wiki_pathway2)
View(wiki_pathway2)
map_dt <- bitr(wiki_pathway2$gene, fromType = "ENTREZID",toType = c( "SYMBOL"),OrgDb = org.Hs.eg.db)
colnames(map_dt) = c("probe_id" ,"symbol")
wiki_pathway2 <- as.data.frame(wiki_pathway1)
wiki_pathway2$probe_id <- wiki_pathway2$gene
View(wiki_pathway2)
wiki_pathway3 <-  merge(wiki_pathway2,map_dt,by.x="probe_id", by.y="probe_id")  # 合并数据
View(wiki_pathway3)
View(wiki_pathway2)
View(wiki_pathway3)
View(wiki_pathway1)
View(wiki_pathway3)
View(wiki_pathway3)
wiki_pathway2 <- as.data.frame(wiki_pathway1)
View(wiki_pathway2)
wiki_pathway2 <-  merge(wiki_pathway2,map_dt,by.x="gene", by.y="probe_id")  # 合并数据
View(wiki_pathway2)
View(wiki_pathway2)
View(wiki_pathway2)
wiki_ID <-  wiki_pathway2$wpid
wiki_ID <-  unique(wiki_pathway2$wpid)
wiki_ID2 <- grep("WP",wiki_ID,value=TRUE)
wiki_ID2 <- parse_number(wiki_ID)
library(readr)
wiki_ID2 <- parse_number(wiki_ID)
wiki_pathway2$wpidnum <- parse_number(wiki_pathway2$wpid)
View(wiki_pathway2)
A1<-wiki_pathway2$wpid
wiki_ID2 <- as.numeric(parse_number(wiki_ID))
wiki_pathway2$wpidnum <- as.numeric(parse_number(wiki_pathway2$wpid))
View(wiki_pathway2)
length(wiki_ID2)
wiki_pathway <- c()
length(wiki_pathway2$wpidnum)
wiki_ID2[1]==wiki_pathway2$wpidnum[1]
View(wiki_pathway2)
linshi_gene <- c()
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
wiki_pathway <- c()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in 1:10)
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
View(wiki_pathway)
wiki_pathway <- list()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in 1:length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[1])
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
wiki_pathway <- list()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in 1:length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[j])
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
View(wiki_pathway)
View(wiki_pathway3)
View(wiki_pathway2)
View(wiki_pathway2)
wiki_pathway <- list()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in 1:100)
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- c(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- c(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- c(linshi_gene$name,wiki_pathway2$name[j])
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
linshi_gene <- c()
for(j in 1:100)
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- c(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- c(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- c(linshi_gene$name,wiki_pathway2$name[j])
}
}
linshi_gene <- c()
for(j in 1:100)
{
if (wiki_ID2[1]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- c(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- c(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- c(linshi_gene$name,wiki_pathway2$name[j])
}
}
View(linshi_gene)
for(j in 1:100)
{
if (wiki_ID2[1]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- cbind(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- cbind(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- cbind(linshi_gene$name,wiki_pathway2$name[j])
}
}
View(linshi_gene)
for(j in 1:100)
{
if (wiki_ID2[1]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- cbind(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- cbind(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- cbind(linshi_gene$name,wiki_pathway2$name[j])
}
}
View(linshi_gene)
linshi_gene <- c()
for(j in 1:100)
{
if (wiki_ID2[1]==wiki_pathway2$wpidnum[j])
{
linshi_gene$gene <- cbind(linshi_gene$gene,wiki_pathway2$symbol[j])
linshi_gene$wikiID <- cbind(linshi_gene$wikiID,wiki_pathway2$wpid[j])
linshi_gene$name <- cbind(linshi_gene$name,wiki_pathway2$name[j])
}
}
View(linshi_gene)
linshi_wikiID <- c()
linshi_wikiID[1] <- wiki_pathway2$wpid[j]
linshi_wikiID[2] <- wiki_pathway2$wpid[j]
wiki_pathway <- list()
linshi_wikiID <- c()
linshi_name <- c()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[j])
linshi_wikiID[i] <- wiki_pathway2$wpid[j]
linshi_name[i] <- wiki_pathway2$name[j]
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
wiki_pathway <- list()
linshi_wikiID <- c()
linshi_name <- c()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
for(j in 1:length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[j])
linshi_wikiID[i] <- wiki_pathway2$wpid[j]
linshi_name[i] <- wiki_pathway2$name[j]
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
}
View(wiki_pathway)
wiki_pathway[1,i]
wiki_pathway[1,1]
wiki_pathway[1][1]
wiki_pathway[[1]][1]
wiki_pathway[[1]][2]
wiki_pathway[[2]][2]
A <- wiki_pathway[[1]]
A[1]
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_ID是KEGG第i1个子网对应的名字
for (j in 1:(length(A)))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(substring(A[j],1,gregexpr(';', A[j])[[1]][1]-1))
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
length(A)
View(wiki_pathway)
View(wiki_pathway2)
View(wiki_pathway2)
wiki_pathway <- list()
wiki_pathway_ID <- list()
linshi_wikiID <- c()
linshi_name <- c()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
linshi_gene_ID <- c()
for(j in 1:length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[j])
linshi_gene_ID <- c(linshi_gene_ID,wiki_pathway2$gene[j])
linshi_wikiID[i] <- wiki_pathway2$wpid[j]
linshi_name[i] <- wiki_pathway2$name[j]
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
wiki_pathway_id <- c(wiki_pathway_id,list(linshi_gene_ID))
}
wiki_pathway <- list()
wiki_pathway_ID <- list()
linshi_wikiID <- c()
linshi_name <- c()
for (i in 1:length(wiki_ID2))
{
linshi_gene <- c()
linshi_gene_ID <- c()
for(j in 1:length(wiki_pathway2$wpidnum))
{
if (wiki_ID2[i]==wiki_pathway2$wpidnum[j])
{
linshi_gene <- c(linshi_gene,wiki_pathway2$symbol[j])
linshi_gene_ID <- c(linshi_gene_ID,wiki_pathway2$gene[j])
linshi_wikiID[i] <- wiki_pathway2$wpid[j]
linshi_name[i] <- wiki_pathway2$name[j]
}
}
wiki_pathway <- c(wiki_pathway,list(linshi_gene))
wiki_pathway_ID <- c(wiki_pathway_ID,list(linshi_gene_ID))
}
A <- wiki_pathway_ID[[1]]
gregexpr(';', A[1])
gregexpr(';', A[1])[[1]][1]
toupper(substring(A[1],1,gregexpr(';', A[1])[[1]][1]-1))
A[1]
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_ID是KEGG第i1个子网对应的名字
for (j in 1:length(A))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(A[j])
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
View(B_ID)
View(B_name)
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_ID是KEGG第i1个子网对应的名字
for (j in 1:length(A))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(AA[j])
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
AA <- wiki_pathway[[1]]
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_ID是KEGG第i1个子网对应的名字
for (j in 1:length(A))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(AA[j])
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
# 下面代码是查看数据中存在的TF、Gene、或者miRNA名字
setwd('E:/2020博一所有材料/scNAE/CODE/R_data/Time')
load('final_data.RData')
Gene_name <- toupper(as.matrix(result_pca_re[[1]][["PCAres"]][["yfit_orig"]]@Dimnames[[1]]))
# 下面代码是将每个小网络与ReguNetwork对应起来
setwd("E:/笔记本备份转移/2018刘治平文章-基因调控网络/DATA/IAV/可用数据/背景网络/human")
human_network <- read.table(file='human.source',sep='\t')
human_network_TF_ID <- as.matrix(human_network[,2]) #  因为有RNA，所以这是一个字符串
human_network_Gene_ID <- as.matrix(human_network[,4])
# 正式循环每个小网络
d <- 1
path_network <- c()
for (i1 in 1:706)
{
A <- wiki_pathway_ID[[i1]]
AA <- wiki_pathway[[i1]]
if (!is.null(A))
{
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_name是KEGG第i1个子网对应的名字
for (j in 1:length(A))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(AA[j])
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
# 先删除小网络中多余的基因（根据IAV数据）
B_GENE <- matrix(0, ncol = length(B_name), nrow = 1)
for(i2 in 1:length(B_GENE))   #匹配IAV中的基因名和小网络的基因名
{
if (length(grep(paste("^",B_name[i2],"$",sep =''),Gene_name))>0)
{
B_GENE [i2] <- grep(paste("^",B_name[i2],"$",sep =''),Gene_name)
}
}
B_GENE_fitter_ID <- B_ID[B_GENE>0]      #网络B中 基因ID号
B_GENE_fitter_name <- B_name[B_GENE>0]  #网络B中 基因名字
B_GENE_fitter_S1 <- B_GENE[B_GENE>0]    #网络B中 IAV数据的位置
if((length(B_GENE_fitter_ID)/length(B_ID))<0.5)
{print('出现了太少的匹配结果!') }
networknl <- c()
for(i in 1:length(B_GENE_fitter_ID)) #遍历每个基因  看看是不是TF
{
number <- grep(paste("^",B_GENE_fitter_ID[i],"$",sep =''),human_network_TF_ID)
if (length(number)>0)  #找到了一个TF
{
for (z in 1:length(number))  #对于每个小网络中的基因 查看其是否为靶基因
{
networkn <- c()
number2 <- grep(paste("^",human_network_Gene_ID[number[z]],"$",sep =''),B_GENE_fitter_ID)
if (length(number2)>0)
{
networkn[1] <- B_GENE_fitter_name[i]           #调控基因
networkn[2] <- B_GENE_fitter_ID[i]             #调控基因ID
networkn[3] <- B_GENE_fitter_S1[i]             #调控基因IAV数据位置
networkn[4] <- B_GENE_fitter_name[number2[1]]  #靶基因
networkn[5] <- B_GENE_fitter_ID[number2[1]]        #靶基因ID
networkn[6] <- B_GENE_fitter_S1[number2[1]]#靶基因IAV数据位置
networkn[7] <- i1
networkn[8] <- paste('第',i1,'子网络', seq='')
networknl <- rbind(networknl,networkn)
print(paste('第',d,'个关联'))
d <- d+1
}
}
}
}
if(!is.null(networknl))
{
if(dim(networknl)[1]>2)
{
colnames(networknl)<-c('Regu_gene_name','Regu_gene_ID','Regu_gene_IAV数据',
'target_name','target_ID','target_IAV数据','子网络位置','子网络位置')
path_network <- c(path_network,list(networknl))
}
}
}
}
B_name[j] <- toupper(AA[j])
load('final_data.RData')
setwd('E:/2020博一所有材料/scNAE/CODE/R_data/Time')
load('final_data.RData')
Gene_name <- toupper(as.matrix(result_pca_re[[1]][["PCAres"]][["yfit_orig"]]@Dimnames[[1]]))
View(result_pca_re)
Gene_name <- toupper(rownames(result_pca_re[[1]][["PCAres"]][["yfit_orig"]]))
(grep(paste("^",B_name[1],"$",sep =''),Gene_name)
)
setwd('E:/2020博一所有材料/scNAE/CODE/R_data/Time')
load('final_data.RData')
Gene_name <- toupper(rownames(result_pca_re[[1]][["PCAres"]][["yfit_orig"]]))
# 下面代码是将每个小网络与ReguNetwork对应起来
setwd("E:/笔记本备份转移/2018刘治平文章-基因调控网络/DATA/IAV/可用数据/背景网络/human")
human_network <- read.table(file='human.source',sep='\t')
human_network_TF_ID <- as.matrix(human_network[,2]) #  因为有RNA，所以这是一个字符串
human_network_Gene_ID <- as.matrix(human_network[,4])
# 正式循环每个小网络
d <- 1
path_network <- c()
for (i1 in 1:706)
{
A <- wiki_pathway_ID[[i1]]
AA <- wiki_pathway[[i1]]
if (!is.null(A))
{
B_ID <- matrix(0, ncol = length(A), nrow = 1)  # B_ID是KEGG第i1个子网
B_name <- matrix(0, ncol = length(A), nrow = 1) # B_name是KEGG第i1个子网对应的名字
for (j in 1:length(A))
{
B_ID[j] <- as.numeric(A[j])
B_name[j] <- toupper(AA[j])
}
colnames(B_ID)<-NULL
rownames(B_ID)<-NULL
# 先删除小网络中多余的基因（根据IAV数据）
B_GENE <- matrix(0, ncol = length(B_name), nrow = 1)
for(i2 in 1:length(B_GENE))   #匹配IAV中的基因名和小网络的基因名
{
if (length(grep(paste("^",B_name[i2],"$",sep =''),Gene_name))>0)
{
B_GENE [i2] <- grep(paste("^",B_name[i2],"$",sep =''),Gene_name)
}
}
B_GENE_fitter_ID <- B_ID[B_GENE>0]      #网络B中 基因ID号
B_GENE_fitter_name <- B_name[B_GENE>0]  #网络B中 基因名字
B_GENE_fitter_S1 <- B_GENE[B_GENE>0]    #网络B中 IAV数据的位置
if((length(B_GENE_fitter_ID)/length(B_ID))<0.5)
{print('出现了太少的匹配结果!') }
networknl <- c()
for(i in 1:length(B_GENE_fitter_ID)) #遍历每个基因  看看是不是TF
{
number <- grep(paste("^",B_GENE_fitter_ID[i],"$",sep =''),human_network_TF_ID)
if (length(number)>0)  #找到了一个TF
{
for (z in 1:length(number))  #对于每个小网络中的基因 查看其是否为靶基因
{
networkn <- c()
number2 <- grep(paste("^",human_network_Gene_ID[number[z]],"$",sep =''),B_GENE_fitter_ID)
if (length(number2)>0)
{
networkn[1] <- B_GENE_fitter_name[i]           #调控基因
networkn[2] <- B_GENE_fitter_ID[i]             #调控基因ID
networkn[3] <- B_GENE_fitter_S1[i]             #调控基因IAV数据位置
networkn[4] <- B_GENE_fitter_name[number2[1]]  #靶基因
networkn[5] <- B_GENE_fitter_ID[number2[1]]        #靶基因ID
networkn[6] <- B_GENE_fitter_S1[number2[1]]#靶基因IAV数据位置
networkn[7] <- i1
networkn[8] <- paste('第',i1,'子网络', seq='')
networknl <- rbind(networknl,networkn)
print(paste('第',d,'个关联'))
d <- d+1
}
}
}
}
if(!is.null(networknl))
{
if(dim(networknl)[1]>2)
{
colnames(networknl)<-c('Regu_gene_name','Regu_gene_ID','Regu_gene_IAV数据',
'target_name','target_ID','target_IAV数据','子网络位置','子网络位置')
path_network <- c(path_network,list(networknl))
}
}
}
}
library(openxlsx)
setwd('E:/2020博一所有材料/scNAE/CODE/R_data')
write.xlsx(path_network,"wiki_network.xlsx")
save.image("SARS_wiki_pathway.RData")
library('rWikiPathways')
#下载包  这里date要写
wiki_pathway1 <- readPathwayGMT('ReactomePathways.gmt')
library('rWikiPathways')
#下载包  这里date要写
wiki_pathway1 <- readPathwayGMT('ReactomePathways.gmt')
View(wiki_pathway1)
wiki_pathway1 <- read.table('ReactomePathways.gmt',header = F)
wiki_pathway1 <- readPathwayGMT('ReactomePathways.gmt')
View(wiki_pathway1)
BiocManager::install(version = "3.11")
BiocManager::install(version = "3.1")
rm(list = ls())
library(Seurat)
setwd('E:/2020博一所有材料/scNAE/CODE/SERGIO-master/data_sets/Gene_30_cell_3')
data <- read.table('G30_C3_S100S.xlsx',header = T)
View(data)
data <- read.csv('G30_C3_S100S.csv',header = T)
data <- read.csv('G30_C3_S100S.csv')
data <- read.csv('G30_C3_S100S.csv',sep = ',')
data <- read.table('G30_C3_S100S.xlsx')
data <- read.csv('G30_C3_S100S.csv',sep = ',')
